{%- if (port|length) == 0 or (type|length) == 0 %}{{ ("port or type not defined")|raise}}{% endif -%}
substitutions:
  {%- if port == "ble" %}
  # tion mac address. setup yours.
  tion_mac_address: 00:00:00:00:00:00
  {%- endif %}
  # name of the node.
  node_name: tion-{{ "lite" if type == "lt" else type }}
  # name for main climate entity and prefix for all others.
  friendly_name: $node_name
  # add suffix for node name to have one firmware for many devices.
  node_add_mac_suffix: "{{ 'true' if enable_node_add_mac_suffix == 'true' else 'false' }}"
  {%- if type == "3s" and port == "uart" %}
  # board
  board: esp01_1m
  {%- endif %}
  {%- if type in ["3s", "o2"] and port == "uart" %}
  # uart configuration
  # make sure to use YOUR pins!
  tx_pin: TX
  rx_pin: RX
  baud_rate: "115200"
  # uart proxy configuration (optional)
  # make sure to use YOUR pins!
  proxy_tx_pin: GPIO15
  proxy_rx_pin: GPIO13
  proxy_baud_rate: "115200"
  {%- endif %}

  # wifi settings.
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password

  {%- if (project_source|length) > 0 %}
  project_source: {{ project_source }}
  {%- endif %}
  {%- if (project_branch|length) > 0 %}
  project_branch: {{ project_branch }}
  {%- endif %}
  {%- if (project_version|length) > 0 %}
  project_version: {{ project_version }}
  {%- endif %}

packages:
  tion:
    url: https://github.com/dentra/esphome-tion
    ref: {{ version_tion }} # cant use substitutions here
    files:
      ## Enable additional WiFi signal sensor. Comment next line to disable.
      - packages/wifi_signal.yaml
      {%- if port == "ble" %}
      ## Enable additional BLE RSSI sensor. Comment next line to disable.
      - packages/rssi_signal.yaml
      {%- endif %}
      ## Enable additional Uptime sensor. Comment next line to disable.
      - packages/uptime.yaml
      ## Enable additional Restart button. Comment next line to disable.
      - packages/restart.yaml
      ## Base climate definition. Do not comment or move or remove.
      - packages/tion_{{ type }}_climate.yaml
      {%- if type == "lt" %}
      ## Enable maximum target temperature to 30°C. Uncomment next line to enable.
      #- packages/tion_temperature30c.yaml
      {%- else %}
      ## Enable maximum target temperature to 30°C. Comment next line to disable.
      - packages/tion_temperature30c.yaml
      {%- endif %}
      ## Uncomment to enable heat_cool mode to workaraund when using Home Assistant turn_on service.
      {{ "" if enable_heat_cool == "true" else "# " -}}
      - packages/tion_enable_heat_cool.yaml
      {%- if type != "3s" %}
      ## Uncomment next line to enable additional energy sensor.
      {{ "" if enable_energy == "true" else "# " -}}
      - packages/tion_energy.yaml
      {%- endif %}
      {%- if type == "o2" and port == "uart" %}
      ## Unomment to enable uart proxy support.
      # - packages/tion_o2_proxy.yaml
      {%- endif %}
      {%- if type in ["3s", "o2"] %}
      ## Antifrize protection. Automatically turns on the heater at a temperature of 0°C and below.
      - packages/tion_3s_enable_antifrize.yaml
      {%- endif %}
      {%- if type == "3s" %}
      ## Turn the breezer off before enable heat mode.
      - packages/tion_3s_enable_off_before_heat.yaml
      {%- endif %}
      ## Common configuration settings. Do not comment or move or remove.
      - packages/base.yaml
      {%- if type == "3s" and port == "uart" %}
      ## Change to packages/esp32.yaml if you want to use ESP32.
      - packages/esp8266.yaml
      ## Comment to disable uart proxy support.
      - packages/tion_3s_proxy.yaml
      {%- endif %}
      {%- if type == "o2" and port == "uart" %}
      # Change to esp32_s2.yaml/esp32_c3.yaml/esp32_s3.yaml to use with ESP32-S2/C3/S3 chip.
      - packages/esp32.yaml
      {%- endif %}
      {%- if type == "4s" and port == "uart" %}
      # Change to esp32_s2.yaml/esp32_c3.yaml to use with ESP32-S2/ESP32-C3 chip or change to esp32.yaml to use with ESP32 chip.
      - packages/esp32_s3.yaml
      {%- endif %}
      {%- if port == "ble" %}
      ## BLE configuration settings. Do not comment or move or remove.
      - packages/esp32_ble.yaml
      ## Uncomment next line to enable persistent connection runtime control switch.
      # - packages/persistent.yaml
      ## Uncomment next line to enable additional connect switch useful for debugging.
      # - packages/connect.yaml
      {%- endif %}
      {%- if type == "4s" %}
      ## Uncomment next line to enable additional internal timers support.
      # - packages/tion_4s_timers.yaml
      {%- endif %}
      {%- if type != "3s" or port != "uart" %}
      ## Uncomment next line to enable monitor internal ESP temperature.
      {{ "" if enable_esp32_temperature == "true" else "# " -}}
      # - packages/esp32_temperature.yaml
      {%- endif %}
      ## Uncomment next line to enable web server support.
      {{ "" if enable_web_server == "true" else "# " -}}
      - packages/web_server.yaml
      ## Uncomment next line to enable additional debug information.
      # - packages/debug.yaml
    {%- if (packages_refresh|length) > 0 %}
    refresh: {{ packages_refresh }}
    {%- endif %}

# Uncomment to enable MQTT connecion.
# WARNINIG: If you leave next api section for logging purpose
#           and do not use Home Assistant, you need to uncomment
#           reboot_timeout parameter.
# mqtt:
#   broker: !secret mqtt_borker
#   port: !secret mqtt_port
#   username: !secret mqtt_username
#   password: !secret mqtt_password
#   discovery: false # remove or set to true if you plan to use with Home Assistant

# Enable Home Assistant API connection. Please do not remove to keep logs functioning.
api:
  # Uncomment next line if you do not use Home Assistant.
  #reboot_timeout: 0s

# WiFi hotspot configuration.
# Comment next 3 lines to enable manual WiFi conviguration via access point.
wifi:
  ssid: $wifi_ssid
  password: $wifi_password

# Virtual port configuration
vport:
  - platform: tion_{{ type }}_{{port}}
    id: tion_{{ port }}_vport
    {%- if port == "ble" %}
    ble_client_id: tion_{{ port }}_client
    ## Optional, Do not disconnect after receiving state. Default: false.
    persistent_connection: false
    ## Optional, Allow to disable other BLE device scanning when breezer is already connected. Default: false.
    # disable_scan: false
    {%- else %}
    uart_id: uart_tion
    {%- endif %}
    {%- if type == "3s" and port == "ble" %}
    ## Optional, Send a pair command after every connect (experimental feature)
    # experimental_always_pair: false
    {%- endif %}
    ## Optional, Interval between sending commmands. Set to 0ms to send one command per loop.
    # command_interval: {{ "100ms" if port == "ble" else "20ms" }}
    ## Optional, Command queue size. Default: 10.
    # command_queue_size: 16
    {%- if type == "4s" and port == "uart" %}
    ## Optional, Interval between sending heartbeat commands. Default: 5s.
    # heartbeat_interval: 5s
    {%- endif %}

# Main climate component configuration.
tion:
  type: {{ type }}
  id: tion_api
  # Optional, use vport_id with mnultiple breezers.
  vport_id: tion_{{ port }}_vport
  # Optional, How often query device state. Default: 15s.
  update_interval: {{ "15s" if port == "uart" else "60s" }}
  # Optional, Timeout to combine update operations. Default: 200ms.
  batch_timeout: 200ms
  # Optional, Timeout to enable state problem sensor. Must be less than update_interval. Default: 3s.
  state_timeout: {{ "3s" if port == "uart" else "5s" }}
  # # Optional, Boost time initialized at startup. Default: 10min.
  # boost_time: 10min
  # Optional, Updates sensor values on any state response or only if they have been changed. Default: true.
  force_update: false

  # Optional, Enable presets. Default: <empty> (no presets)
  # You can define any number of presets with any name.
  # In Home assistant climate entity presets with names home, away, boost, comfort,
  # eco, sleep and activity are automatically translated to your native language and assign icons.
  # Preset configuration:
  #  name_of_your_preset:
  #    fan_speed: 1            # remove or set to 0 to use current state
  #    temperature: 16         # remove or set to 0 to use current state
  #    heater: False           # remove to use current state
  #    power: True             # remove to use current state
{%- if type in ["3s", "4s"] %}
  #    gate_position: outdoor  # remove to use current state, see below for available values
  # Available gate_position:
  #  * outdoor - set gate position to outdoor air intake (3S and 4S only)
  #  * indoor - set gate position to indoor air intake (3S and 4S only)
{%- endif %}
{%- if type == "3s" %}
  #  * mixed - set gate position to mixed air intake (3S only)
{%- endif %}
  # Uncoment next 4 lines to enable example presets.
  # presets:
  #   home: { fan_speed: 2, target_temperature: 16, heater: False }
  #   away: { fan_speed: 1, target_temperature: 10, heater: False }
  #   sleep: { fan_speed: 1, target_temperature: 18 }

climate:
  - platform: tion
    name: # use friendly_name

sensor:
  # Temperatire of air before heater, °C (celsius).
  - platform: tion
    type: outdoor_temperature
    name: Outdoor Temperature
{%- if type in ["4s", "lt"] %}
  # Optional, Heater power, W (watt).
  - platform: tion
    type: heater_power
    name: Heater power
{%- endif %}
  # Current productivity, m³/h (cubic meters per hour).
  - platform: tion
    type: productivity
    name: Productivity
  # Filter time left counter.
  - platform: tion
    type: filter_time_left
    name: Filter Time Left
  # Boost time left sensor.
  - platform: tion
    type: boost_time_left
    name: Boost Time Left

switch:
{%- if type != "o2" %}
  # Buzzer control switch.
  - platform: tion
    type: sound
    name: Buzzer
{%- endif %}
{%- if type == "4s" %}
  # Led control switch.
  - platform: tion
    type: led
    name: Led
{%- endif %}
{%- if type == "4s" %}
  # Recirculation control switch.
  - platform: tion
    type: recirculation
    name: Recirculation
{%- endif %}
  # Boost/Turbo switch.
  - platform: tion
    type: boost
    name: Boost

number:
  # Configure boost time.
  - platform: tion
    type: boost_time
    name: Boost Time
    initial_value: 20min
    restore_value: true

select:
{%- if type == "3s" %}
    # Optional, Air Intake control.
  - platform: tion
    type: air_intake
    name: Air Intake
{%- endif %}

binary_sensor:
  # Informs about state receiving problem from the breezer.
  - platform: tion
    type: state
    name: State Warnout
{%- if type == "lt" %}
  # Gate state control.
  - platform: tion
    type: gate
    name: Gate State
{%- endif %}
  # Filter warning state.
  - platform: tion
    type: filter
    name: Filter Warnout

text_sensor:
  # Tion firmware version.
  - platform: tion
    type: firmware_version
    name: Version
  # Reports Tion's errors (EC) and warnings (WS).
  - platform: tion
    type: errors
    name: Errors

button:
{%- if type != "o2" %}
  # Reset filter button.
  - platform: tion
    type: reset_filter
    name: Reset Filter
    # Reset filter confirmation. When off then reset_filter will not work.
    confirm:
      name: Reset Filter Confirm
{%- endif %}
{%- if type == "3s" and port == "ble" %}
  - platform: template
    name: Pair
    icon: mdi:bluetooth-connect
    on_press:
      lambda: id(tion_{{ port }}_vport).pair();
    entity_category: config
  ## Uncomment next 5 lines to enable switch for enable reset pair functionality.
  # - platform: template
  #   name: Reset Pair
  #   icon: mdi:bluetooth-off
  #   on_press:
  #     lambda: id(tion_{{ port }}_vport).reset_pair();
  #   entity_category: config
{%- endif %}
{%- if type in ["4s", "lt"] %}
## Uncomment if you plan to use reset errors/warnings functionality.
## This feature is experimental and may partially work or not to work as expected.
#  - platform: template
#    name: "Reset Errors"
#    on_press:
#      - lambda: id(tion_climate).reset_errors();
{%- endif %}
